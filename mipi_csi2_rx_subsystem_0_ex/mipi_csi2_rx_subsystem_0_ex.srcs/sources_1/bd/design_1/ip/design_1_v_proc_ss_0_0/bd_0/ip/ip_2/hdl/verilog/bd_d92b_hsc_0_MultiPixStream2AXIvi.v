// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_d92b_hsc_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        StrmMPix_V_val_0_V_dout,
        StrmMPix_V_val_0_V_empty_n,
        StrmMPix_V_val_0_V_read,
        StrmMPix_V_val_1_V_dout,
        StrmMPix_V_val_1_V_empty_n,
        StrmMPix_V_val_1_V_read,
        StrmMPix_V_val_2_V_dout,
        StrmMPix_V_val_2_V_empty_n,
        StrmMPix_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height_dout,
        Height_empty_n,
        Height_read,
        WidthOut_dout,
        WidthOut_empty_n,
        WidthOut_read,
        ColorMode_dout,
        ColorMode_empty_n,
        ColorMode_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] StrmMPix_V_val_0_V_dout;
input   StrmMPix_V_val_0_V_empty_n;
output   StrmMPix_V_val_0_V_read;
input  [7:0] StrmMPix_V_val_1_V_dout;
input   StrmMPix_V_val_1_V_empty_n;
output   StrmMPix_V_val_1_V_read;
input  [7:0] StrmMPix_V_val_2_V_dout;
input   StrmMPix_V_val_2_V_empty_n;
output   StrmMPix_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] Height_dout;
input   Height_empty_n;
output   Height_read;
input  [15:0] WidthOut_dout;
input   WidthOut_empty_n;
output   WidthOut_read;
input  [7:0] ColorMode_dout;
input   ColorMode_empty_n;
output   ColorMode_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg StrmMPix_V_val_0_V_read;
reg StrmMPix_V_val_1_V_read;
reg StrmMPix_V_val_2_V_read;
reg Height_read;
reg WidthOut_read;
reg ColorMode_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] mapComp_address0;
reg    mapComp_ce0;
wire   [1:0] mapComp_q0;
reg    StrmMPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1320_reg_575;
reg    StrmMPix_V_val_1_V_blk_n;
reg    StrmMPix_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1320_reg_575_pp0_iter1_reg;
reg    Height_blk_n;
reg    WidthOut_blk_n;
reg    ColorMode_blk_n;
reg   [15:0] j_0_i_reg_279;
reg   [15:0] Height_read_reg_506;
reg    ap_block_state1;
reg   [15:0] WidthOut_read_reg_511;
wire   [16:0] zext_ln1268_fu_290_p1;
reg   [16:0] zext_ln1268_reg_516;
wire   [4:0] sub_ln321_fu_310_p2;
reg   [4:0] sub_ln321_reg_521;
wire   [1:0] i_fu_322_p2;
reg   [1:0] i_reg_529;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1311_fu_316_p2;
wire   [16:0] add_ln1334_fu_351_p2;
reg   [16:0] add_ln1334_reg_546;
wire   [1:0] trunc_ln215_fu_356_p1;
reg   [1:0] trunc_ln215_reg_551;
wire   [1:0] trunc_ln215_1_fu_360_p1;
reg   [1:0] trunc_ln215_1_reg_556;
wire   [1:0] trunc_ln215_2_fu_364_p1;
reg   [1:0] trunc_ln215_2_reg_561;
wire   [0:0] icmp_ln1317_fu_392_p2;
wire    ap_CS_fsm_state4;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [15:0] i_1_fu_397_p2;
reg   [15:0] i_1_reg_570;
wire   [0:0] icmp_ln1320_fu_407_p2;
wire    ap_block_state5_pp0_stage0_iter0;
wire    io_acc_block_signal_op80;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] j_fu_412_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_418_p2;
reg   [0:0] tmp_last_V_reg_584;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [1:0] i_0_i_reg_256;
wire    ap_CS_fsm_state3;
reg   [15:0] i1_0_i_reg_268;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln321_fu_337_p1;
reg   [4:0] map_V_0_03_i_fu_170;
wire   [4:0] zext_ln321_1_fu_373_p1;
reg   [4:0] map_V_1_04_i_fu_174;
reg   [4:0] map_V_2_05_i_fu_178;
reg   [0:0] tmp_user_V_fu_182;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln321_1_fu_298_p1;
wire   [4:0] zext_ln321_cast_fu_302_p3;
wire   [4:0] trunc_ln321_fu_294_p1;
wire   [4:0] zext_ln321_fu_328_p1;
wire   [4:0] add_ln321_fu_332_p2;
wire   [16:0] zext_ln1320_fu_403_p1;
wire   [7:0] tmp_4_fu_461_p5;
wire   [7:0] tmp_3_fu_450_p5;
wire   [7:0] tmp_fu_439_p5;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_d92b_hsc_0_MultiPixStream2AXwdI #(
    .DataWidth( 2 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

bd_d92b_hsc_0_v_hscaler_mux_32_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_xdS_U116(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_reg_551),
    .dout(tmp_fu_439_p5)
);

bd_d92b_hsc_0_v_hscaler_mux_32_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_xdS_U117(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_1_reg_556),
    .dout(tmp_3_fu_450_p5)
);

bd_d92b_hsc_0_v_hscaler_mux_32_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_hscaler_mux_32_xdS_U118(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_2_reg_561),
    .dout(tmp_4_fu_461_p5)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd7),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_user_V_fu_182),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_last_V_reg_584),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln1317_fu_392_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln1317_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln1317_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_0_i_reg_268 <= i_1_reg_570;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1311_fu_316_p2 == 1'd1))) begin
        i1_0_i_reg_268 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_256 <= i_reg_529;
    end else if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_256 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1317_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        j_0_i_reg_279 <= 16'd0;
    end else if (((icmp_ln1320_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_reg_279 <= j_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_182 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1311_fu_316_p2 == 1'd1))) begin
        tmp_user_V_fu_182 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_read_reg_506 <= Height_dout;
        WidthOut_read_reg_511 <= WidthOut_dout;
        sub_ln321_reg_521 <= sub_ln321_fu_310_p2;
        zext_ln1268_reg_516[15 : 0] <= zext_ln1268_fu_290_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1311_fu_316_p2 == 1'd1))) begin
        add_ln1334_reg_546 <= add_ln1334_fu_351_p2;
        trunc_ln215_1_reg_556 <= trunc_ln215_1_fu_360_p1;
        trunc_ln215_2_reg_561 <= trunc_ln215_2_fu_364_p1;
        trunc_ln215_reg_551 <= trunc_ln215_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_1_reg_570 <= i_1_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_529 <= i_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1320_reg_575 <= icmp_ln1320_fu_407_p2;
        icmp_ln1320_reg_575_pp0_iter1_reg <= icmp_ln1320_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_reg_256 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_0_03_i_fu_170[1 : 0] <= zext_ln321_1_fu_373_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_reg_256 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_1_04_i_fu_174[1 : 0] <= zext_ln321_1_fu_373_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_i_reg_256 == 2'd1) & ~(i_0_i_reg_256 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        map_V_2_05_i_fu_178[1 : 0] <= zext_ln321_1_fu_373_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1320_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_584 <= tmp_last_V_fu_418_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_blk_n = ColorMode_empty_n;
    end else begin
        ColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_read = 1'b1;
    end else begin
        ColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_blk_n = Height_empty_n;
    end else begin
        Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_read = 1'b1;
    end else begin
        Height_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V_blk_n = StrmMPix_V_val_0_V_empty_n;
    end else begin
        StrmMPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_0_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_1_V_blk_n = StrmMPix_V_val_1_V_empty_n;
    end else begin
        StrmMPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_1_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_2_V_blk_n = StrmMPix_V_val_2_V_empty_n;
    end else begin
        StrmMPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_2_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_blk_n = WidthOut_empty_n;
    end else begin
        WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_read = 1'b1;
    end else begin
        WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1320_fu_407_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln1317_fu_392_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln1317_fu_392_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1320_reg_575_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln1320_reg_575 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1320_reg_575 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1311_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln1317_fu_392_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln1317_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1320_fu_407_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1320_fu_407_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1334_fu_351_p2 = ($signed(17'd131071) + $signed(zext_ln1268_reg_516));

assign add_ln321_fu_332_p2 = (sub_ln321_reg_521 + zext_ln321_fu_328_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln1320_reg_575 == 1'd0) & (io_acc_block_signal_op80 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln1320_reg_575 == 1'd0) & (io_acc_block_signal_op80 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln1320_reg_575 == 1'd0) & (io_acc_block_signal_op80 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ColorMode_empty_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln1320_reg_575 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln1320_reg_575 == 1'd0) & (io_acc_block_signal_op80 == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln1320_reg_575_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_1_fu_397_p2 = (i1_0_i_reg_268 + 16'd1);

assign i_fu_322_p2 = (i_0_i_reg_256 + 2'd1);

assign icmp_ln1311_fu_316_p2 = ((i_0_i_reg_256 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1317_fu_392_p2 = ((i1_0_i_reg_268 == Height_read_reg_506) ? 1'b1 : 1'b0);

assign icmp_ln1320_fu_407_p2 = ((j_0_i_reg_279 == WidthOut_read_reg_511) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op80 = (StrmMPix_V_val_2_V_empty_n & StrmMPix_V_val_1_V_empty_n & StrmMPix_V_val_0_V_empty_n);

assign j_fu_412_p2 = (j_0_i_reg_279 + 16'd1);

assign m_axis_video_TDATA_int = {{{tmp_4_fu_461_p5}, {tmp_3_fu_450_p5}}, {tmp_fu_439_p5}};

assign m_axis_video_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign mapComp_address0 = sext_ln321_fu_337_p1;

assign sext_ln321_fu_337_p1 = $signed(add_ln321_fu_332_p2);

assign sub_ln321_fu_310_p2 = (zext_ln321_cast_fu_302_p3 - trunc_ln321_fu_294_p1);

assign tmp_last_V_fu_418_p2 = ((zext_ln1320_fu_403_p1 == add_ln1334_reg_546) ? 1'b1 : 1'b0);

assign trunc_ln215_1_fu_360_p1 = map_V_1_04_i_fu_174[1:0];

assign trunc_ln215_2_fu_364_p1 = map_V_2_05_i_fu_178[1:0];

assign trunc_ln215_fu_356_p1 = map_V_0_03_i_fu_170[1:0];

assign trunc_ln321_1_fu_298_p1 = ColorMode_dout[2:0];

assign trunc_ln321_fu_294_p1 = ColorMode_dout[4:0];

assign zext_ln1268_fu_290_p1 = WidthOut_dout;

assign zext_ln1320_fu_403_p1 = j_0_i_reg_279;

assign zext_ln321_1_fu_373_p1 = mapComp_q0;

assign zext_ln321_cast_fu_302_p3 = {{trunc_ln321_1_fu_298_p1}, {2'd0}};

assign zext_ln321_fu_328_p1 = i_0_i_reg_256;

always @ (posedge ap_clk) begin
    zext_ln1268_reg_516[16] <= 1'b0;
    map_V_0_03_i_fu_170[4:2] <= 3'b000;
    map_V_1_04_i_fu_174[4:2] <= 3'b000;
    map_V_2_05_i_fu_178[4:2] <= 3'b000;
end

endmodule //bd_d92b_hsc_0_MultiPixStream2AXIvi
